mport random

intro_questions = [
    "What's your favorite color?",
    "What's your favorite food?",
    "What's your favorite movie?",
    "What's your favorite book?",
    "What's your favorite hobby?"
]

def select_hobbies():
    hobbies = [
        "Reading", "Traveling", "Cooking", "Sports", "Music",
        "Art", "Dancing", "Gaming", "Hiking", "Photography"
    ]
    print("Select your hobbies and interests:")
    for i, hobby in enumerate(hobbies, 1):
        print(f"{i}. {hobby}")
    selected = input("Select options by number separated by commas (or enter 0 to skip): ")
    if selected == "0":
        return []
    try:
        selected_indices = [int(i) for i in selected.split(",") if i.strip().isdigit()]
        return [hobbies[i - 1] for i in selected_indices]
    except ValueError:
        print("Invalid input. Please enter numbers only.")
        return select_hobbies()

def play_blackjack():
    # Simulate a simple blackjack game
    return random.choice(["win", "lose", "draw"])

personality_traits = [
    "Adventurous", "Charming", "Creative", "Dependable", "Energetic",
    "Friendly", "Generous", "Honest", "Intelligent", "Kind"
]

class Partner:
    def __init__(self, name, age, personality, compatibility_score):
        self.name = name
        self.age = age
        self.personality = personality
        self.compatibility_score = compatibility_score

women_instances = [
    Partner("Alice", 24, "Adventurous", 85),
    Partner("Beth", 28, "Charming", 90)
]

men_instances = [
    Partner("John", 26, "Creative", 80),
    Partner("Mike", 30, "Dependable", 75)
]

def art_gallery_event():
    print("You enjoyed the beautiful art pieces together.")
    follow_up_activity("Art Gallery")

def theater_event():
    print("The play was amazing and you both had a great time.")
    follow_up_activity("Theater")

def zoo_visit_event():
    print("The animals were active and you both enjoyed the visit.")
    follow_up_activity("Zoo Visit")

def sports_game_event():
    print("Your team won and the crowd was ecstatic.")
    follow_up_activity("Sports Game")

def camping_event():
    print("The weather was perfect and you had a great time camping.")
    follow_up_activity("Camping")

def road_trip_event():
    print("The road trip was smooth and you enjoyed the scenic views.")
    follow_up_activity("Road Trip")

def follow_up_activity(event):
    activities = {
        "Art Gallery": ["Take a photo at the gallery", "Discuss favorite pieces"],
        "Theater": ["Get popcorn", "Discuss the play"],
        "Zoo Visit": ["Grab food", "Take photos of animals"],
        "Sports Game": ["Get a hotdog", "Cheer for the team"],
        "Camping": ["Make s'mores", "Tell stories by the campfire"],
        "Road Trip": ["Stop for a meal", "Take scenic photos"]
    }
    print(f"Select a follow-up activity for your {event} date:")
    for i, activity in enumerate(activities[event], 1):
        print(f"{i}. {activity}")
    selected_activity = int(input("Select an activity by number: "))
    print(f"You have selected to {activities[event][selected_activity - 1]}.")

def date_phase(partner):
    print(f"Entering the dating phase with {partner.name}...")
    activities = ["Art Gallery", "Theater", "Zoo Visit", "Sports Game", "Camping", "Road Trip"]
    activity_functions = [art_gallery_event, theater_event, zoo_visit_event, sports_game_event, camping_event, road_trip_event]
    negative_events = [
        "You spilled coffee on your partner.",
        "You had an argument about the play.",
        "You got lost in the zoo.",
        "Your team lost the game.",
        "It rained heavily during camping.",
        "The car broke down during the road trip.",
        "You accidentally insulted your partner's favorite artist.",
        "You got a flat tire on the way to the theater.",
        "You forgot to bring tickets to the zoo.",
        "You got into a fight with a fan at the sports game.",
        "You forgot the tent while camping.",
        "You ran out of gas during the road trip."
    ]
    negative_outcomes = 0

    for date_number in range(1, 4):
        print(f"Select an activity for your date {date_number}:")
        for i, activity in enumerate(activities, 1):
            print(f"{i}. {activity}")
        selected_activity = int(input("Select an activity by number: "))
        print(f"You have selected {activities[selected_activity - 1]} for your date {date_number} with {partner.name}.")
        activity_functions[selected_activity - 1]()

        if date_number > 1:  # Dates 2 and 3 are always negative
            print(f"Date {date_number} did not go well. Reason: {negative_events[selected_activity - 1]}")
            negative_outcomes += 1
        else:
            print(f"Date {date_number} was a success!")

        if negative_outcomes >= 2:
            print("You have had two negative dates. Game over.")
            return

    print(f"Dating {partner.name} complete.")

def simulate_game():
    print("Simulating the blackjack game...")
    user_profile = {}
    for question in intro_questions:
        answer = input(question + " ")
        user_profile[question] = answer

    user_age = input("Please enter your age: ")
    user_profile["Age"] = user_age

    user_hobbies = select_hobbies()
    user_profile["Hobbies"] = user_hobbies
    print(f"Your selected hobbies are: {', '.join(user_hobbies)}")

    result = play_blackjack()
    if result == "win":
        user_personality = random.choice(personality_traits[:5])
        user_compatibility_score = random.randint(70, 100)
    elif result == "lose":
        user_personality = random.choice(personality_traits[5:])
        user_compatibility_score = random.randint(30, 69)
    else:
        user_personality = random.choice(personality_traits)
        user_compatibility_score = random.randint(20, 100)

    user_profile["Personality"] = user_personality
    user_profile["Compatibility Score"] = user_compatibility_score

    print("User Profile:")
    for key, value in user_profile.items():
        if key == "Hobbies":
            print(f"{key}: {', '.join(value)}")
        else:
            print(f"{key}: {value}")

    # Matchmaking logic
    potential_partners = women_instances if input("Do you want to date a male or female? (male/female): ").lower() == 'female' else men_instances
    best_match = max(potential_partners, key=lambda partner: partner.compatibility_score)
    print(f"Best match found: {best_match.name}, Age: {best_match.age}, Personality: {best_match.personality}, Compatibility Score: {best_match.compatibility_score}")

    # Move into the dating phase
    date_phase(best_match)

def welcome_user():
    print("Welcome to Ira's Game of Love!")
    user_name = input("Please enter your name: ")
    return user_name

def main():
    user_name = welcome_user()
    game_mode = input(f"{user_name}, would you like the blackjack game to be simulated (S) or manual (M)? ").lower()
    if game_mode == 'm':
        game_loop()
    else:
        simulate_game()

if __name__ == "__main__":
    main()